!!!! test_name_file.py  #  test_*.py или *_test.py

3.3 Тестирование с помощью PyTest
    pytest scripts/selenium_scripts # найти все тесты в директории scripts/selenium_scripts
    pytest test_user_interface.py # найти и выполнить все тесты в файле
    pytest scripts/drafts.py::test_register_new_user_parametrized # найти тест с именем test_register_new_user_parametrized
                                                                   в указанном файле в указанной директории и выполнить

        1. дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории
        2. во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py или *_test.py
           (то есть начинаются на test_ или заканчиваются _test и имеют расширение .py)

        3. внутри всех этих файлов находит тестовые функции по следующему правилу:
            - все тесты, название которых начинается с test, которые находятся вне классов
            - все тесты, название которых начинается с test внутри классов,
              имя которых начинается с Test (и без метода __init__ внутри класса)
            https://docs.pytest.org/en/stable/goodpractices.html#conventions-for-python-test-discovery

    Usefull commands:
    pytest -v # make more colors in pytest report
    pytest -s # увидеть текст, который выводится командой print().
    https://gist.github.com/amatellanes/12136508b816469678c2
    е элемента и намеренный вызов ошибки

with pytest.raises() - проверка на содержание элемента и намеренный вызов ошибки(редко используется)
    import pytest

    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.common.exceptions import NoSuchElementException


    def test_exception1():
        try:
            browser = webdriver.Chrome()
            browser.get("http://selenium1py.pythonanywhere.com/")
            with pytest.raises(NoSuchElementException):
                browser.find_element(By.CSS_SELECTOR, "button.btn")
                pytest.fail("Не должно быть кнопки Отправить")
        finally:
            browser.quit()

    def test_exception2():
    try:
        browser = webdriver.Chrome()
        browser.get("http://selenium1py.pythonanywhere.com/")
        with pytest.raises(NoSuchElementException):
            browser.find_element(By.CSS_SELECTOR, "no_such_button.btn")
            pytest.fail("Не должно быть кнопки Отправить")
    finally:
        browser.quit()

3.4 Fixtures https://docs.pytest.org/en/latest/how-to/xunit_setup.html

    Классический способ работы с фикстурами — создание setup- и teardown-методов в файле с тестами
    Рекомендуется открывать и закрывать браузер для каждого теста, чтоб на результат не влиял кэш.
    Код который откроет браузер дважды:
        class TestMainPage2():
            '''!!!!the browser will be open two times for 2 tests recommended!!!'''
            def setup_method(self):
                print("start browser for test..")
                self.browser = webdriver.Chrome()

            def teardown_method(self):
                print("quit browser for test..")
                self.browser.quit()

            def test_guest_should_see_login_link(self):
                self.browser.get(link)
                self.browser.find_element(By.CSS_SELECTOR, "#login_link")

            def test_guest_should_see_basket_link_on_the_main_page(self):
                self.browser.get(link)
                self.browser.find_element(By.CSS_SELECTOR, ".basket-mini .btn-group > a")

    3.4.3
    @pytest.fixture # продвинутый подход к фикстурам, когда фикстуры можно задавать глобально,
                      передавать их в тестовые методы как параметры, а также имеет набор встроенных фикстур.
                      Это более гибкий и удобный способ работы со вспомогательными функциями, и сейчас вы сами увидите почему.

    import pytest
        from selenium import webdriver
        from selenium.webdriver.common.by import By

        link = "http://selenium1py.pythonanywhere.com/"


        @pytest.fixture
        def browser():
            print("\nstart browser for test..")
            browser = webdriver.Chrome()
            return browser


        class TestMainPage1():
            # вызываем фикстуру в тесте, передав ее как параметр
            def test_guest_should_see_login_link(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "#login_link")

            def test_guest_should_see_basket_link_on_the_main_page(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, ".basket-mini .btn-group > a")

    yield # Финализаторы использование ключевого слова Python: yield. После завершения теста, который вызывал фикстуру,
                                                                      выполнение фикстуры продолжится со строки,
                                                                      следующей за строкой со словом yield

    import pytest
    from selenium import webdriver
    from selenium.webdriver.common.by import By

    link = "http://selenium1py.pythonanywhere.com/"


    @pytest.fixture
    def browser():
        print("\nstart browser for test..")
        browser = webdriver.Chrome()
        yield browser
        # этот код выполнится после завершения теста
        print("\nquit browser..")
        browser.quit()


    class TestMainPage1():
        # вызываем фикстуру в тесте, передав ее как параметр
        def test_guest_should_see_login_link(self, browser):
            browser.get(link)
            browser.find_element(By.CSS_SELECTOR, "#login_link")

    Есть альтернативный способ вызова teardown кода с помощью встроенной фикстуры request и ее метода addfinalizer
    https://docs.pytest.org/en/latest/how-to/fixtures.html#adding-finalizers-directly

    Рекомендуем также выносить очистку данных и памяти в фикстуру,
    вместо того чтобы писать это в шагах теста: финализатор выполнится даже в ситуации, когда тест упал с ошибкой.

    3.4.5
    @pytest.fixture(scope="class") # scope = “function”, “class”, “module”, “session”.
                                     Соответственно, фикстура будет вызываться один раз для тестового метода,
                                     один раз для класса, один раз для модуля или один раз для всех тестов,
                                     запущенных в данной сессии.

    @pytest.fixture(scope="class")
    def browser():
        print("\nstart browser for test..")
        browser = webdriver.Chrome()
        yield browser
        print("\nquit browser..")
        browser.quit()

    3.4.6
    autouse=True # укажет, что фикстуру нужно запустить для каждого теста даже без явного вызова

        import pytest
        from selenium import webdriver
        from selenium.webdriver.common.by import By

        link = "http://selenium1py.pythonanywhere.com/"


        @pytest.fixture
        def browser():
            print("\nstart browser for test..")
            browser = webdriver.Chrome()
            yield browser
            print("\nquit browser..")
            browser.quit()

        @pytest.fixture(autouse=True)
        def prepare_data():
            print()
            print("preparing some critical data for every test")


        class TestMainPage1():
            def test_guest_should_see_login_link(self, browser):
                # не передаём как параметр фикстуру prepare_data, но она все равно выполняется
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "#login_link")

            def test_guest_should_see_basket_link_on_the_main_page(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, ".basket-mini .btn-group > a")

    more information:

        https://habr.com/ru/company/yandex/blog/242795/

        https://docs.pytest.org/en/stable/fixture.html

    3.5 МАРКИРОВКА:
        мы можем "отключать" тесты которые нам не нужны сейчас, понадобятся при релизе или других ситуациях. Маркируем и
        создаём обьяснение в корне проекта, для того чтоб не было вопросов у Pytest.
        smoke test - критические тесты
        regression test - регрессионные и запускать их только перед релизом.

        @pytest.mark.mark_name, где mark_name — произвольная строка.

            class TestMainPage1():

                @pytest.mark.smoke
                def test_guest_should_see_login_link(self, browser):
                    browser.get(link)
                    browser.find_element(By.CSS_SELECTOR, "#login_link")

                @pytest.mark.regression
                def test_guest_should_see_basket_link_on_the_main_page(self, browser):
                    browser.get(link)
                    browser.find_element(By.CSS_SELECTOR, ".basket-mini .btn-group > a")

        Чтобы запустить тест с нужной маркировкой, нужно передать в командной строке параметр -m и нужную метку:

                pytest -s -v -m smoke test_fixture8.py

        НЕОБОДИМО ЗАРЕГЕСТРИРОВАТЬ МЕТКИ в корневой папке проекта:
        create file pytest.ini
            [pytest]
            markers =
                smoke: marker for smoke tests
                regression: marker for regression tests

        Чтобы запустить все тесты, не имеющие заданную маркировку, можно использовать инверсию.
            pytest -s -v -m "not smoke" test_fixture8.py

        Для запуска тестов с разными метками можно использовать логическое ИЛИ. Запустим smoke и regression-тесты:
            pytest -s -v -m "smoke or regression" test_fixture8.py


        Комбинированные маркеры:
            pytest -s -v -m "smoke and win10" test_fixture81.py

        class TestMainPage1:

            @pytest.mark.smoke
            def test_guest_should_see_login_link(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "#login_link")

            @pytest.mark.smoke
            @pytest.mark.win10
            def test_guest_should_see_basket_link_on_the_main_page(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, ".basket-mini .btn-group > a")

        XFail - Отметить тест как падающий, помечаем чтоб не забыть

            @pytest.mark.xfail
            def test_guest_should_see_search_button_on_the_main_page(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "button.favorite")]

            pytest -v test_fixture10.py

            к маркировке xfail можно добавлять параметр reason

            @pytest.mark.xfail(reason="fixing this bug right now")
            def test_guest_should_see_search_button_on_the_main_page(self, browser):
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "button.favorite")

            pytest -rx -v test_fixture10a.py
            pytest -rX -v test_fixture10b.py - более подробная инфо

            как пропускать тест только при выполнении условия, как сделать так,
            чтобы внезапно прошедший xfailed тест в отчете стал красным,

            и так далее. ---> https://pytest.org/en/stable/skipping.html - документацыя

    3.6 PyTest — параметризация, конфигурирование, плагины
        Conftest.py — конфигурация тестов
        Создадим файл conftest.py в корневом каталоге нашего тестового проекта и перенесем туда фикстуру browser.
        Позволит не прописывать фикстуру в каждом тесте
        conftest.py:

        import pytest
        from selenium import webdriver
        from selenium.webdriver.common.by import By

        @pytest.fixture(scope="function")
        def browser():
            print("\nstart browser for test..")
            browser = webdriver.Chrome()
            yield browser
            print("\nquit browser..")
            browser.quit()

        Теперь, сколько бы файлов с тестами мы ни создали, у тестов будет доступ к фикстуре browser.
        ОЧЕНЬ ВАЖНО!
        elenium_course_solutions/
        ├── section3
        │   └── conftest.py
        │   └── test_languages.py
        ├── section4
        │   └── conftest.py
        │   └── test_main_page.py

        Параметризация тестов
        @pytest.mark.parametrize()

            @pytest.mark.parametrize('language', ["ru", "en-gb"]) - запустит в двух языках
            def test_guest_should_see_login_link(browser, language): КАВЫЧКИ!
                link = f"http://selenium1py.pythonanywhere.com/{language}/"
                browser.get(link)
                browser.find_element(By.CSS_SELECTOR, "#login_link")

        Параметры также можно задавать для целого класса:
            @pytest.mark.parametrize('language', ["ru", "en-gb"])
            class TestLogin:
                def test_guest_should_see_login_link(self, browser, language):

        документация: https://docs.pytest.org/en/latest/how-to/parametrize.html?highlight=parametrize


        Conftest.py и передача параметров в командной строке
        https://docs.pytest.org/en/latest/example/simple.html?highlight=addoption

        pytest_addoption и фикстурa request
        Сначала добавляем в файле conftest обработчик опции в функции pytest_addoption,
        затем напишем фикстуру, которая будет обрабатывать переданные в опции данные

        def pytest_addoption(parser):
               parser.addoption('--browser_name', action='store', default=None, help="Choose browser: chrome or firefox")

        @pytest.fixture(scope="function")
        def browser(request):
            browser_name = request.config.getoption("browser_name")
            browser = None
            if browser_name == "chrome":
                print("\nstart chrome browser for test..")
                browser = webdriver.Chrome()
            elif browser_name == "firefox":
                print("\nstart firefox browser for test..")
                browser = webdriver.Firefox()
            else:
                raise pytest.UsageError("--browser_name should be chrome or firefox")
            yield browser
            print("\nquit browser..")
            browser.quit()
        ПАРАМЕТРЫ КОМАНДНОЙ СТРОКИ
            pytest -s -v --browser_name=chrome test_parser.py

    3.6.8 Плагины и перезапуск тестов
        Полный список доступных плагинов доступен, https://docs.pytest.org/en/latest/reference/plugin_list.html

        pytest-rerunfailures - перезагружает упавший тест
        https://docs.pytest.org/en/stable/usage.html#modifying-python-traceback-printing
            добавить в командную строку "--reruns n" - n - количество перезапусков
            "--tb=line" - сократить лог с результатами теста
            https://docs.pytest.org/en/stable/usage.html#modifying-python-traceback-printing
        ПАРАМЕТРЫ КОМАНДНОЙ СТРОКИ:
            pytest -v --tb=line --reruns 1 --browser_name=chrome test_rerun.py
            "--tb=line", чтобы сократить лог с результатами теста
            https://docs.pytest.org/en/stable/usage.html#modifying-python-traceback-printing -- настройки вывода в документации PyTest

    3.6.9 Запуск автотестов для разных языков интерфейса:
        Укажем чтоб сервер сам решал, какой язык интерфейса нужно отобразить, основываясь на данных браузера.
        Браузер передает данные о языке пользователя через запросы к серверу,
        указывая в Headers (заголовке запроса) параметр accept-language.

        from selenium.webdriver.chrome.options import Options

        options = Options()
        options.add_experimental_option('prefs', {'intl.accept_languages': user_language})
        browser = webdriver.Chrome(options=options)

        Для Firefox объявление нужного языка будет выглядеть немного иначе:
        fp = webdriver.FirefoxProfile()
        fp.set_preference("intl.accept_languages", user_language)
        browser = webdriver.Firefox(firefox_profile=fp)

