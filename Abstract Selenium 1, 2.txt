Searching elements:
id - #id
tag - tag
attribute - [id="world"]
name - [name="bullet-cat"]
class - .class-class (if it has space = .class-class.class)

CSS selectors
#post2 .title
#post2 > div.title - что нужно взять элемент с тегом и классом: div.title,
                     который находится строго на один уровень иерархии ниже чем элемент #post2.
                     Для этого используется символ >

#posts > .item:nth-child(2) > .title - Псевдо-класс :nth-child(2) — позволяет найти второй по порядку элемент среди
                                       дочерних элементов
# https://learn.javascript.ru/css-selectors
# https://www.w3schools.com/cssref/css_selectors.asp
# https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Selectors

XPath
XPath - https://selenium-python.readthedocs.io/locating-elements.html#locating-elements

Selenium methods:

find_element(By.ID, value) — поиск по уникальному атрибуту id элемента.
Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло,
и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;

find_element(By.CSS_SELECTOR, value) — поиск элемента с помощью правил на основе CSS. Это универсальный метод поиска,
так как большинство веб-приложений использует CSS для вёрстки и задания оформления страницам.
Если find_element_by_id вам не подходит из-за отсутствия id у элементов,
то скорее всего вы будете использовать именно этот метод в ваших тестах;

find_element(By.XPATH, value) — поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;

find_element(By.NAME, value) — поиск по атрибуту name элемента;

find_element(By.TAG_NAME, value) — поиск элемента по названию тега элемента;

find_element(By.CLASS_NAME, value) — поиск по значению атрибута class;

find_element(By.LINK_TEXT, value) — поиск ссылки на странице по полному совпадению;

find_element(By.PARTIAL_LINK_TEXT, value) — поиск ссылки на странице,
если текст селектора совпадает с любой частью текста ссылки.

browser.close() - закрывает текущее окно браузера.
browser.quit() - закрывает все окна, вкладки, и процессы вебдрайвера, запущенные во время тестовой сессии.


Lesson 1.6.5 Поиск по тексту

link browser.find_element(By.LINK_TEXT, "Degree Symbol in Math") - поиск по ссылке
link.click()

link = browser.find_element(By.PARTIAL_LINK_TEXT, "Math") - элемент со ссылкой по подстроке
link.click()

1.6.6
find_elements - вернёт список всех найденных элементов по заданному условию



2.1.6
get_attribute - проверка на наличие атрибута. text() not need to use


2.2 FILES, LISTS, Javascript
Select - удобный способ для работы с выпвдвющими и видимыми списками
        from selenium.webdriver.support.ui import Select
select_by_value(value) - ищем элемент
select.select_by_visible_text("text") - text
select.select_by_index(index) - index


СКРОЛИНГ
    execute_script - можно выполнить программу, написанную на языке JavaScript,
                 как часть сценария автотеста в запущенном браузере.

    Давайте попробуем вызвать alert в браузере с помощью WebDriver. Пример сценария:

    from selenium import webdriver
    browser = webdriver.Chrome()
    browser.execute_script("alert('Robots at work');")

    browser.execute_script("document.title='Script executing';")
    browser.execute_script('document.title="Script executing";')

    browser.execute_script("document.title='Script executing';alert('Robots at work');")

2.2.7 РАБОТА С ФАЙЛОВОЙ СИСТЕМОЙ
    element.send_keys(file_path)


2.3 Working with windows

alert
    1. переключиться на окно с alert, а затем принять его с помощью команды accept():
    alert = browser.switch_to.alert
    alert.accept()

    Чтобы получить текст из alert, используйте свойство text объекта alert:

    alert = browser.switch_to.alert
    alert_text = alert.text

    2. another way: confirm (buttons: accept/no)
        confirm = browser.switch_to.alert
        confirm.accept()

        Для confirm-окон можно использовать следующий метод для отказа:
            confirm.dismiss()

    3. prompt — имеет дополнительное поле для ввода текста. Чтобы ввести текст, используйте метод send_keys():
        prompt = browser.switch_to.alert
        prompt.send_keys("My answer")
        prompt.accept()

2.3 ПЕРЕХОД НА НОВУЮ ВКЛАДКУ
    browser.switch_to.window(window_name) - переключения на новую вкладку надо явно указать,
                                            на какую вкладку мы хотим перейти

    new_window = browser.window_handles[index] - возвращает массив имён всех вкладок.

    first_window = browser.window_handles[0] - запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться

        current_window = browser.current_window_handle - покажут текущую вкладку

2.4 ОЖИДАНИЕ ОТКРЫТИЯ НОВОЙ СТРАНИЦЫ Selenium Waits (Implicit Waits)
    browser.implicitly_wait(5) - не надо явно указывать каждый раз, когда мы выполняем поиск элементов,
                                 оно автоматически будет применяться при вызове каждой последующей команды.

EXEPTIONS:
    NoSuchElementException - не был найден за отведенное время
    StaleElementReferenceException - Если элемент был найден в момент поиска,
                                     но при последующем обращении к элементу DOM изменился
    ElementNotVisibleException - элемент был найден в момент поиска,
                                 но сам элемент невидим (например, имеет нулевые размеры),
                                 и реальный пользователь не смог бы с ним взаимодействовать

    expected_conditions - ожидание кликабельности
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            button = WebDriverWait(browser, 5).until(
            EC.element_to_be_clickable((By.ID, "verify"))
            )

            !!! В модуле expected_conditions есть много других правил,
                которые позволяют реализовать необходимые ожидания:
                https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions

            Если мы захотим проверять, что кнопка становится неактивной после отправки данных,
            то можно задать негативное правило с помощью метода until_not:

            # говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
            button = WebDriverWait(browser, 5).until_not(
            EC.element_to_be_clickable((By.ID, "verify"))
            )

